/* Generated by SharpKit 5 v5.4.8 */
if (typeof ($Inherit) == 'undefined') {
	var $Inherit = function (ce, ce2) {

		if (typeof (Object.getOwnPropertyNames) == 'undefined') {

			for (var p in ce2.prototype)
				if (typeof (ce.prototype[p]) == 'undefined' || ce.prototype[p] == Object.prototype[p])
					ce.prototype[p] = ce2.prototype[p];
			for (var p in ce2)
				if (typeof (ce[p]) == 'undefined')
					ce[p] = ce2[p];
			ce.$baseCtor = ce2;

		} else {

			var props = Object.getOwnPropertyNames(ce2.prototype);
			for (var i = 0; i < props.length; i++)
				if (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) == 'undefined')
					Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));

			for (var p in ce2)
				if (typeof (ce[p]) == 'undefined')
					ce[p] = ce2[p];
			ce.$baseCtor = ce2;

		}

	}
};

if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


var IsIE6 = false;
var IsWebKit = false;
IsIE6 = ((window.navigator.userAgent.indexOf("MSIE 6.") != -1) && (window.navigator.userAgent.indexOf("Opera") == -1));
IsWebKit = (window.navigator.userAgent.indexOf("AppleWebKit") != -1);
function ApplyExactTemplate(el, template){
    if (el.getAttribute("_IsTemplated"))
        return null;
    else
        null;
    el.setAttribute("_IsTemplated", true);
    var tmp = template.cloneNode(true);
    tmp.id = "";
    $(el).replaceWith(tmp);
    $("#Element", tmp).replaceWith(el);
    return tmp;
};
function ApplyTemplates(){
    $("#Templates").children().each(function (i, templateEl){
        templateEl.setAttribute("_IsTemplated", true);
        var className = "." + templateEl.id;
        $(className).each(function (index, t){
            ApplyExactTemplate(t, templateEl);
        });
    });
};
function ApplyTemplate(el){
    var className = el.className;
    if (className.length > 0){
        var templateEl = document.getElementById(className);
        if (templateEl != null && templateEl.parentElement.id == "Templates")
            return ApplyExactTemplate(el, templateEl);
        else
            null;
    }
    else
        null;
    return null;
};
function ParseQueryString(search){
    var obj = new Object();
    var pairs = search.substring(1).split("&");
    for (var $i2 = 0,$l2 = pairs.length,pair = pairs[$i2]; $i2 < $l2; $i2++, pair = pairs[$i2]){
        var tokens = pair.split("=");
        obj[decodeURIComponent(tokens[0])] = decodeURIComponent(tokens[1]);
    }
    return obj;
};
function GetFormData(inputMappings, suffix){
    var obj2 = inputMappings;
    var data = new Object();
    for (var p in obj2){
        var id = obj2[p];
        if (suffix != null)
            id += suffix;
        else
            null;
        var input = document.getElementById(id);
        if (input == null)
            continue;
        else
            null;
        if (input.type == "checkbox")
            data[p] = input.checked;
        else
            data[p] = input.value;
    }
    return data;
};
function GetRepeatedFormData(inputMappings){
    var list =  [];
    var i = 0;
    while (true){
        i++;
        var data = GetFormData(inputMappings, i.toString());
        if (data == null)
            return list;
        else
            null;
        list.push(data);
    }
};
function FixBrowserCompatibilityIssues(){
    if (IsIE6 || IsWebKit){
        $("a").each(function (i, el){
            FixAnchor(el);
        });
    }
    else
        null;
};
function FixAnchor(el){
    if (el == null || el.nodeName != "A")
        return null;
    else
        null;
    if (!IsWebKit)
        return null;
    else
        null;
    var a = el;
    if (a.href == null || a.href.length == 0)
        a.href = "javascript:void(0);";
    else
        null;
};
function SmoothScrollTo(id){
    $("html,body").animate({
        scrollTop: $("#" + id).offset().top
    }, "slow");
};
function SmoothScrollToTop(){
    $("html,body").animate({
        scrollTop: 0
    }, "slow");
};
if (typeof(DesktopBrowser) == "undefined")
    var DesktopBrowser = {};
if (typeof(DesktopBrowser.Client) == "undefined")
    DesktopBrowser.Client = {};
if (typeof(DesktopBrowser.Client.Utils) == "undefined")
    DesktopBrowser.Client.Utils = {};
DesktopBrowser.Client.Utils.JsArrayEnumerator = function (array){
    this.Array = null;
    this.Index = 0;
    this.Array = array;
    this.Index = -1;
};
DesktopBrowser.Client.Utils.JsArrayEnumerator.prototype.MoveNext = function (){
    this.Index++;
    return this.Index < this.Array.length;
};
DesktopBrowser.Client.Utils.JsArrayEnumerator.prototype.get_Current = function (){
    return this.Array[this.Index];
};
DesktopBrowser.Client.Utils.JsArrayEnumerator.prototype.Dispose = function (){
};
DesktopBrowser.Client.Utils.JsArrayEnumerator.prototype.Reset = function (){
    this.Index = -1;
};
Array.prototype.GetEnumerator = function (){
    return new DesktopBrowser.Client.Utils.JsArrayEnumerator(this);
};
$Inherit(Array, Array);
DesktopBrowser.Client.Utils.JsExtensions = function (){
};
DesktopBrowser.Client.Utils.JsExtensions.Trim = function (s){
    return s.replace(new RegExp("^\\s*"), "").replace(new RegExp("\\s*$"), "");
};
DesktopBrowser.Client.Utils.JsExtensions.AsJsArray = function (list){
    throw $CreateException(new System.Exception.ctor(), new Error());
};
DesktopBrowser.Client.Utils.JsExtensions.AsJsArray = function (array){
    throw $CreateException(new System.Exception.ctor(), new Error());
};
DesktopBrowser.Client.Utils.JsExtensions.AsList = function (list){
    throw $CreateException(new System.Exception.ctor(), new Error());
};
DesktopBrowser.Client.Utils.JsExtensions.IndexOf = function (array, item){
    var i = 0;
    for (var $i2 = 0,$l2 = array.length,item2 = array[$i2]; $i2 < $l2; $i2++, item2 = array[$i2]){
        if (item2 == item)
            return i;
        else
            null;
        i++;
    }
    return -1;
};
DesktopBrowser.Client.Utils.JsExtensions.Remove = function (array, item){
    var i = 0;
    for (var $i3 = 0,$l3 = array.length,item2 = array[$i3]; $i3 < $l3; $i3++, item2 = array[$i3]){
        if (item2 == item){
            array.splice(i, 1);
            return true;
        }
        else
            null;
        i++;
    }
    return false;
};
DesktopBrowser.Client.Utils.JsExtensions.RemoveAt = function (array, index){
    array.splice(index, 1);
};
DesktopBrowser.Client.Utils.JsExtensions.Clear = function (array){
    array.splice(0, array.length);
};
DesktopBrowser.Client.Utils.JsExtensions.Contains = function (array, item){
    for (var $i4 = 0,$l4 = array.length,item2 = array[$i4]; $i4 < $l4; $i4++, item2 = array[$i4]){
        if (item2 == item)
            return true;
        else
            null;
    }
    return false;
};
DesktopBrowser.Client.Utils.JsExtensions.Insert = function (array, index, item){
    array.splice(index, 0, item);
};
DesktopBrowser.Client.Utils.jQueryExtensions = function (){
};
DesktopBrowser.Client.Utils.jQueryExtensions.isChecked = function (j, value){
    if (arguments.length == 1)
        return j.attr("checked");
    else {
        j.attr("checked", value);
        return undefined;
    }
};
DesktopBrowser.Client.Utils.jQueryExtensions.val = function (j, visible){
    if (visible)
        j.show();
    else
        j.hide();
};
DesktopBrowser.Client.SiteProxy = function (){
    this.DataClient = null;
    this.DataClient = new DesktopBrowser.Client.Utils.DataServiceProxy();
};
DesktopBrowser.Client.SiteProxy.prototype.Execute = function (path, callback){
    this.Invoke("Execute", [path], callback);
};
DesktopBrowser.Client.SiteProxy.prototype.Delete = function (path, callback){
    this.Invoke("Delete", [path], callback);
};
DesktopBrowser.Client.SiteProxy.prototype.Invoke = function (methodName, prms, callback){
    var req = {
        AssemblyName: "DesktopBrowser",
        TypeName: "DesktopBrowser.Server.SiteService",
        MethodName: methodName,
        Parameters: prms
    };
    this.DataClient.InvokeAsync(req, $CreateAnonymousDelegate(this, function (t){
        if (t.Error != null){
            alert(t.Error);
        }
        else {
            if (callback != null)
                callback(t.ReturnValue);
            else
                null;
        }
    }), false);
};
DesktopBrowser.Client.Utils.DataServiceProxy = function (){
    this.DataServiceUrl = null;
    this.DataServiceUrl = "DataService.ashx";
};
DesktopBrowser.Client.Utils.DataServiceProxy.CreateRequest = function (){
    if (window.XMLHttpRequest)
  return new XMLHttpRequest();

else if (window.ActiveXObject)
     return new ActiveXObject('MSXML2.XMLHTTP.3.0');
else
    throw new Error('Your browser does not support ajax requests');
};
DesktopBrowser.Client.Utils.DataServiceProxy.WebGetAsync = function (url, callback){
    var req = DesktopBrowser.Client.Utils.DataServiceProxy.CreateRequest();
    req.open("GET", url, true);
    req.onreadystatechange = function (){
        if (req.readyState == 4){
            callback(req);
        }
        else
            null;
    };
    req.send(null);
};
DesktopBrowser.Client.Utils.DataServiceProxy.WebPostFormAsync = function (url, form, callback){
    var req = DesktopBrowser.Client.Utils.DataServiceProxy.CreateRequest();
    req.open("POST", url, true);
    req.setRequestHeader("content-type", "application/x-www-form-urlencoded");
    req.onreadystatechange = function (){
        if (req.readyState == 4){
            callback(req);
        }
        else
            null;
    };
    var sb =  [];
    DesktopBrowser.Client.Utils.DataServiceProxy.SerializeForm(form, sb);
    req.send(sb.join(""));
};
DesktopBrowser.Client.Utils.DataServiceProxy.SerializeForm = function (form, sb){
    var first = true;
    for (var p in form){
        if (first)
            first = false;
        else
            sb.push("&");
        sb.push(p);
        sb.push("=");
        sb.push(encodeURIComponent(form[p]));
    }
};
DesktopBrowser.Client.Utils.DataServiceProxy.prototype.InvokeAsync = function (req, callback, useGetMethod){
    var callback2 = $CreateAnonymousDelegate(this, function (t){
        var res = {};
        if (t.status == 200){
            var code = t.responseText;
            res = JSON.parse(code);
        }
        else {
            res.Error = "Http error code " + t.status + ", " + t.statusText;
        }
        callback(res);
    });
    var url = this.DataServiceUrl;
    var sb =  [];
    if (useGetMethod){
        sb.push(url, "?z=z");
        DesktopBrowser.Client.Utils.DataServiceProxy.SerializeToQueryString(req, sb);
        url = sb.join("");
        DesktopBrowser.Client.Utils.DataServiceProxy.WebGetAsync(url, callback2);
    }
    else {
        var body = JSON.stringify(req);
        DesktopBrowser.Client.Utils.DataServiceProxy.WebPostFormAsync(url, new Object({
            req: body
        }), callback2);
    }
};
DesktopBrowser.Client.Utils.DataServiceProxy.SerializeToQueryString = function (req, sb){
    if (req.AssemblyName != null)
        sb.push("&a=" + req.AssemblyName);
    else
        null;
    if (req.TypeName != null)
        sb.push("&t=" + req.TypeName);
    else
        null;
    if (req.MethodName != null)
        sb.push("&m=" + req.MethodName);
    else
        null;
    if (req.InstanceSessionKey != null)
        sb.push("&isk=" + req.InstanceSessionKey);
    else
        null;
    if (req.Parameters != null){
        var prms = req.Parameters;
        for (var i = 0; i < prms.length; i++){
            sb.push("&p");
            sb.push((i + 1).toString());
            sb.push("=");
            sb.push(encodeURIComponent(prms[i].toString()));
        }
    }
    else
        null;
};
DesktopBrowser.Keys = function (){
};
DesktopBrowser.Keys.Enter = 13;
DesktopBrowser.Keys.PageUp = 33;
DesktopBrowser.Keys.PageDown = 34;
DesktopBrowser.Keys.End = 35;
DesktopBrowser.Keys.Home = 36;
DesktopBrowser.Keys.Up = 38;
DesktopBrowser.Keys.Down = 40;
DesktopBrowser.ClientExtensions = function (){
};
DesktopBrowser.ClientExtensions.RegexEscape = function (text){
    return text.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", "g"), "\\$&");
};

