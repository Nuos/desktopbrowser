/* Generated by SharpKit 5 v5.4.9 */

if (typeof(dbr) == "undefined")
    var dbr = {};
dbr.DefaultPage2 = function (){
    this.Res = null;
    this.grdFiles = null;
    this.tbPath = null;
    this.navleft = null;
    this.Req = null;
    this.Win = null;
    this.FileSelection = null;
    this.clock = null;
    this.tbSearch = null;
    this.Service = null;
    this.El = null;
    this.grdFiles2 = null;
    this.DefaultReq = null;
    this.Buttons = null;
    $($CreateDelegate(this, this.OnDomReady));
    this.Service = new dbr.SiteServiceClient();
    this.Res = {
        Relatives: {}
    };
    this.FileSelection = (function (){
        var $v1 = new dbr.utils.Selection();
        $v1.Changed = $CreateDelegate(this, this.FileSelection_Changed);
        return $v1;
    }).call(this);
};
dbr.DefaultPage2.prototype.get_Path = function (){
    return this.Req.Path;
};
dbr.DefaultPage2.prototype.OnDomReady = function (){
    this.Win = window;
    this.El = $("body");
    this.grdFiles = this.El.getAppend("#grdFiles.Grid");
    this.navleft = $("#navleft");
    this.clock = $("#clock");
    this.tbSearch = $("#tbSearch");
    this.UpdateClock();
    this.Buttons =  [{
        Id: "GotoParentDir",
        Text: "Up",
        Action: $CreateAnonymousDelegate(this, function (){
            this.GotoFolder(this.Res.Relatives.ParentFolder);
        })
    }, {
        Id: "GotoPrevSibling",
        Text: "Prev",
        Action: $CreateAnonymousDelegate(this, function (){
            this.GotoFolder(this.Res.Relatives.PreviousSibling);
        })
    }, {
        Id: "GotoNextSibling",
        Text: "Next",
        Action: $CreateAnonymousDelegate(this, function (){
            this.GotoFolder(this.Res.Relatives.NextSibling);
        })
    }, {
        Id: "Folders",
        Text: "Folders",
        Action: $CreateAnonymousDelegate(this, function (){
            this.Req.HideFolders = !this.Req.HideFolders;
            this.SaveReqListAndRender();
        }),
        IsActive: $CreateAnonymousDelegate(this, function (){
            return this.Req.HideFiles;
        })
    }, {
        Id: "Files",
        Text: "Files",
        Action: $CreateAnonymousDelegate(this, function (){
            this.Req.HideFiles = !this.Req.HideFiles;
            this.SaveReqListAndRender();
        }),
        IsActive: $CreateAnonymousDelegate(this, function (){
            return this.Req.HideFolders;
        })
    }, {
        Id: "Mix",
        Text: "Mix",
        Action: $CreateAnonymousDelegate(this, function (){
            this.Req.MixFilesAndFolders = !this.Req.MixFilesAndFolders;
            this.SaveReqListAndRender();
        }),
        IsActive: $CreateAnonymousDelegate(this, function (){
            return this.Req.MixFilesAndFolders;
        })
    }, {
        Id: "Size",
        Text: "Folder Size",
        Action: $CreateAnonymousDelegate(this, function (){
            this.Req.FolderSize = !this.Req.FolderSize;
            this.SaveReqListAndRender();
        }),
        IsActive: $CreateAnonymousDelegate(this, function (){
            return this.Req.FolderSize;
        })
    }, {
        Id: "Keep",
        Text: "Keep View",
        Action: $CreateAnonymousDelegate(this, function (){
            this.Req.KeepView = !this.Req.KeepView;
            this.SaveReqListAndRender();
        }),
        IsActive: $CreateAnonymousDelegate(this, function (){
            return this.Req.KeepView;
        })
    }, {
        Id: "Hidden",
        Text: "Hidden",
        Action: $CreateAnonymousDelegate(this, function (){
            this.Req.ShowHiddenFiles = !this.Req.ShowHiddenFiles;
            this.SaveReqListAndRender();
        }),
        IsActive: $CreateAnonymousDelegate(this, function (){
            return this.Req.ShowHiddenFiles;
        })
    }, {
        Id: "Recursive",
        Text: "Recursive",
        Action: $CreateAnonymousDelegate(this, function (){
            this.Req.IsRecursive = !this.Req.IsRecursive;
            this.SaveReqListAndRender();
        }),
        IsActive: $CreateAnonymousDelegate(this, function (){
            return this.Req.IsRecursive;
        })
    }, {
        Id: "Subs",
        Text: "Subs",
        Action: $CreateAnonymousDelegate(this, function (){
            this.OpenInNewWindow(this.GetSubtitleSearchLink(this.Res.File));
        })
    }, {
        Id: "Imdb",
        Text: "Imdb",
        Action: $CreateAnonymousDelegate(this, function (){
            this.OpenInNewWindow(this.GetSubtitleSearchLink(this.Res.File));
        })
    }, {
        Id: "Delete",
        Text: "Delete",
        Action: $CreateAnonymousDelegate(this, function (){
            this.DeleteAndRefresh(this.FileSelection.SelectedItems.last(), null);
        })
    }, {
        Id: "Explore",
        Text: "Explore",
        Action: $CreateAnonymousDelegate(this, function (){
            this.Execute(this.Res.File, $CreateAnonymousDelegate(this, function (res){
                console.info(res);
            }));
        })
    }
    ];
    this.tbPath = $("#tbPath");
    this.Req = {};
    this.DefaultReq = {
        FolderSize: false,
        HideFiles: false,
        HideFolders: false,
        ImageListColumns: null,
        ImageListRows: null,
        IsRecursive: false,
        KeepView: false,
        MixFilesAndFolders: false,
        NoCache: false,
        Path: "",
        SearchPattern: "",
        ShowHiddenFiles: false,
        Skip: null,
        Sort: null,
        Take: null,
        View: null
    };
    this.LoadReq();
    this.RenderButtons();
    this.CreateGrid();
    this.tbPath.val(this.Req.Path);
    this.ListFiles($CreateDelegate(this, this.Render));
    this.Win.onpopstate = $CreateAnonymousDelegate(this, function (e){
        this.LoadReq();
        this.ListAndRender(null);
    });
    $(this.Win).keydown($CreateDelegate(this, this.Win_keydown));
};
dbr.DefaultPage2.prototype.UpdateClock = function (){
    this.clock.text(new Date().format("HH:mm\nddd, MMM d"));
    window.setTimeout($CreateDelegate(this, this.UpdateClock), 5000);
};
dbr.DefaultPage2.prototype.Win_keydown = function (e){
    this.FileSelection.KeyDown(e);
    if (e.isDefaultPrevented())
        return;
    if (e.keyCode == dbr.utils.Keys.Enter){
        var file = this.FileSelection.SelectedItems.last();
        if (file == null)
            return;
        e.preventDefault();
        this.Open(this.FileSelection.SelectedItems.last());
    }
};
dbr.DefaultPage2.prototype.OpenInNewWindow = function (p){
    this.Win.open(p, "_blank");
};
dbr.DefaultPage2.prototype.LoadReq = function (){
    QueryString.parse(null, this.Req, this.DefaultReq);
    var req = this.Req;
    var defs = this.DefaultReq;
    Object.keys(req).forEach($CreateAnonymousDelegate(this, function (key){
        var value = req[key];
        var def = defs[key];
        if (typeof(def) == "boolean"){
            if (value == "1")
                req[key] = true;
            else if (value == "0")
                req[key] = false;
            if (Q.isNullOrEmpty(value))
                req[key] = def;
        }
        if (typeof(def) == "number" && Q.isNullOrEmpty(value)){
            req[key] = parseFloat(value);
        }
    }));
    var path = decodeURI(window.location.pathname);
    path = this.Path_LinuxToWin(path);
    this.Req.Path = path;
    console.info("LoadReq", this.Req);
};
dbr.DefaultPage2.prototype.RenderButtons = function (){
    this.navleft.getAppendRemoveForEach("li", this.Buttons, $CreateAnonymousDelegate(this, function (el, btn){
        el = el.getAppend("a").attr("href", "javascript:void(0);");
        btn.El = el;
        if (btn.Id != null)
            btn.El.attr("id", btn.Id);
        btn.El.click($CreateAnonymousDelegate(this, function (e){
            btn.Action();
            this.RefreshButtonState(btn);
        }));
        btn.El.text(btn.Text);
        this.RefreshButtonState(btn);
    }));
};
dbr.DefaultPage2.prototype.RefreshButtonsState = function (){
    this.Buttons.forEach($CreateDelegate(this, this.RefreshButtonState));
};
dbr.DefaultPage2.prototype.RefreshButtonState = function (btn){
    this.ToggleClass(btn.El.parent("li"), "active", btn.IsActive);
};
dbr.DefaultPage2.prototype.ToggleClass = function (el, className, check){
    if (check == null)
        return;
    var x = check();
    if (x == null)
        x = false;
    el.toggleClass(className, x);
};
dbr.DefaultPage2.prototype.ListFiles = function (cb){
    this.Service.ListFiles(this.Req, $CreateAnonymousDelegate(this, function (res){
        this.Res = res;
        dbr.Extensions2.Trigger(cb);
    }));
};
dbr.DefaultPage2.prototype.GotoPrevSibling = function (){
    this.GotoFolder(this.Res.Relatives.PreviousSibling);
};
dbr.DefaultPage2.prototype.GotoNextSibling = function (){
    this.GotoFolder(this.Res.Relatives.NextSibling);
};
dbr.DefaultPage2.prototype.GotoParentDir = function (){
    this.GotoFolder(this.Res.Relatives.ParentFolder);
};
dbr.DefaultPage2.prototype.GotoFolder = function (file){
    if (file == null || !file.IsFolder)
        return;
    this.GotoPath(file.Path);
};
dbr.DefaultPage2.prototype.GotoPath = function (path){
    if (!this.Req.KeepView){
        this.Req = {};
        this.RefreshButtonsState();
    }
    this.Req.Path = path;
    this.SaveReqListAndRender();
};
dbr.DefaultPage2.prototype.Path_LinuxToWin = function (path){
    if (Q.isNullOrEmpty(path))
        return path;
    if (path == "/"){
        path = "";
    }
    else if (path.startsWith("//")){
        var tokens = path.split("/");
        path = tokens.join("\\");
    }
    else {
        path = path.substr(1);
        var tokens = path.split("/");
        tokens[0] += ":";
        path = tokens.join("\\");
    }
    if (path.endsWith("\\"))
        path = dbr.SiteExtensions.removeLast(path, 1);
    return path;
};
dbr.DefaultPage2.prototype.Path_WinToLinux = function (path){
    if (Q.isNullOrEmpty(path))
        return path;
    var isNetworkShare = path.startsWith("\\\\");
    if (isNetworkShare)
        path = path.substr(1);
    var tokens = path.split("\\");
    if (!isNetworkShare)
        tokens[0] = tokens[0].replaceAll(":", "");
    path = tokens.join("/");
    path = encodeURI(path);
    path = "/" + path;
    if (!path.endsWith("/"))
        path += "/";
    return path;
};
dbr.DefaultPage2.prototype.SaveReq = function (){
    var state = Q.copy(this.Req);
    var path = state.Path;
    path = this.Path_WinToLinux(path);
    delete state.Path;
    var state2 = state;
    var defs = this.DefaultReq;
    Object.keys(state2).forEach($CreateAnonymousDelegate(this, function (key){
        var val = state2[key];
        if (val == null || defs[key] == val){
            delete state2[key];
            return;
        }
        if (val === true)
            state2[key] = "1";
        else if (val === false)
            state2[key] = "0";
    }));
    console.info("SaveReq", state);
    var q = QueryString.stringify(state);
    if (Q.isNotNullOrEmpty(q))
        q = "?" + q;
    var url = location.origin + path + q;
    var win = window;
    win.history.pushState(state, this.Req.Path, url);
};
dbr.DefaultPage2.prototype.SaveReqListAndRender = function (){
    this.SaveReq();
    this.ListAndRender(null);
};
dbr.DefaultPage2.prototype.ListAndRender = function (cb){
    this.ListFiles($CreateAnonymousDelegate(this, function (){
        this.Render();
        dbr.Extensions2.Trigger(cb);
    }));
};
dbr.DefaultPage2.prototype.Render = function (){
    this.tbPath.val(this.get_Path());
    this.RenderGrid();
};
dbr.DefaultPage2.prototype.grdFiles_RenderFinished = function (){
    this.FileSelection.AllItems = this.grdFiles2.CurrentList;
};
dbr.DefaultPage2.prototype.CreateGrid = function (){
    this.grdFiles.off();
    var gridOptions = {
        Columns: [{
            Prop: function (t){
                return t.Name;
            },
            Width: null,
            RenderCell: $CreateDelegate(this, this.RenderNameCell)
        }, {
            Prop: function (t){
                return t.Modified;
            },
            Width: 150,
            Format: $CreateDelegate(this, this.FormatFriendlyDate)
        }, {
            Prop: function (t){
                return t.Size;
            },
            Width: 150,
            Format: $CreateDelegate(this, this.FormatFriendlySize)
        }, {
            Prop: function (t){
                return t.Extension;
            },
            Width: 150
        }
        ],
        RowClass: $CreateDelegate(this, this.GetRowClass),
        PageSize: 100,
        RenderFinished: $CreateDelegate(this, this.grdFiles_RenderFinished)
    };
    this.grdFiles2 = (function (){
        var $v2 = new corexjs.ui.grid.Grid();
        $v2.El = this.grdFiles;
        $v2.Options = gridOptions;
        $v2.SearchInputEl = this.tbSearch;
        return $v2;
    }).call(this);
    this.grdFiles2.Render();
    this.grdFiles.mousedown($CreateAnonymousDelegate(this, function (e){
        var target = $(e.target);
        var file = this.grdFiles2.GetItem(target);
        if (file == null)
            return;
        this.FileSelection.Click(file, e.ctrlKey, e.shiftKey);
    }));
    this.grdFiles.click($CreateAnonymousDelegate(this, function (e){
        var target = $(e.target);
        var file = this.grdFiles2.GetItem(target);
        if (file == null)
            return;
        if (!target.is("a.Name"))
            return;
        e.preventDefault();
        this.Open(file);
    }));
    this.grdFiles.dblclick($CreateAnonymousDelegate(this, function (e){
        var target = $(e.target);
        var file = this.grdFiles2.GetItem(target);
        if (file == null)
            return;
        e.preventDefault();
        this.Open(file);
    }));
};
dbr.DefaultPage2.prototype.RenderGrid = function (){
    if (this.grdFiles2 == null){
        this.CreateGrid();
    }
    this.grdFiles2.Options.Items = this.Res.Files;
    this.grdFiles2.Render();
    this.FileSelection.AllItems = this.grdFiles2.CurrentList;
    this.FileSelection.SelectedItems.clear();
    var selectedFileName = dbr.DefaultPage.RestoreSelection(this.Res.File.Name);
    if (Q.isNotNullOrEmpty(selectedFileName)){
        var files = this.FileSelection.AllItems.where($CreateAnonymousDelegate(this, function (t){
            return t.Name == selectedFileName;
        }));
        this.FileSelection.SetSelection(files);
    }
};
dbr.DefaultPage2.prototype.FileSelection_Changed = function (e){
    e.Removed.forEach($CreateDelegate(this.grdFiles2, this.grdFiles2.RenderRow$$T));
    e.Added.forEach($CreateDelegate(this.grdFiles2, this.grdFiles2.RenderRow$$T));
    var file = this.FileSelection.SelectedItems.last();
    if (file == null)
        return;
    dbr.DefaultPage.SaveSelection2(this.Res.File.Name, file.Name);
};
dbr.DefaultPage2.prototype.DeleteAndRefresh = function (file, cb){
    if (file == null)
        return;
    var fileOrFolder = file.IsFolder ? "folder" : "file";
    if (!this.Win.confirm("Are you sure you wan to delete the " + fileOrFolder + "?\n" + file.Path))
        return;
    this.Service.Delete({
        Path: file.Path
    }, $CreateAnonymousDelegate(this, function (res){
        this.ListAndRender(cb);
    }));
};
dbr.DefaultPage2.prototype.Open = function (file){
    if (file == null)
        return;
    if (file.IsFolder){
        this.GotoFolder(file);
        return;
    }
    var prompt = false;
    if (file.Extension != null){
        var ext = file.Extension.toLowerCase();
        var blackList =  [".exe", ".bat", ".com"];
        if (blackList.contains(ext)){
            prompt = true;
        }
    }
    else {
        prompt = true;
    }
    if (prompt && !this.Win.confirm("This is an executable file, are you sure you want to run it?"))
        return;
    this.Execute(file, $CreateAnonymousDelegate(this, function (res){
        console.info(res);
    }));
};
dbr.DefaultPage2.prototype.Execute = function (file, cb){
    this.Service.Execute({
        Path: file.Path
    }, cb);
};
dbr.DefaultPage2.prototype.FormatFriendlyDate = function (value){
    return dbr.SiteExtensions.ToFriendlyRelative2(dbr.SiteExtensions.ToDefaultDate(value), null);
};
dbr.DefaultPage2.prototype.FormatFriendlySize = function (value){
    return dbr.SiteExtensions.ToFriendlySize(value);
};
dbr.DefaultPage2.prototype.RenderNameCell = function (col, file, td){
    td.getAppend("a.Name").text(file.Name).attr("href", "javascript:void(0)");
};
dbr.DefaultPage2.prototype.GetRowClass = function (file, index){
    var s = "FileRow";
    if (file.IsFolder)
        s += " IsFolder";
    if (file.IsFolder)
        s += " IsFile";
    if (this.FileSelection.SelectedItems.contains(file))
        s += " Selected";
    return s;
};
dbr.DefaultPage2.prototype.GetSubtitleSearchLink = function (File){
    if (File == null)
        return null;
    var s = this.GetFilenameForSearch(File.Name);
    return "https://www.google.com/search?q=" + encodeURIComponent(s + " eng subscene");
};
dbr.DefaultPage2.prototype.GetGoogleSearchLink = function (File){
    if (File == null)
        return null;
    var s = this.GetFilenameForSearch(File.Name);
    return "https://www.google.com/search?q=" + encodeURIComponent(s);
};
dbr.DefaultPage2.prototype.GetFilenameForSearch = function (s){
    var tokens = s.split(new RegExp("[ \\.\\-]")).select($CreateAnonymousDelegate(this, function (t){
        return t.toLowerCase();
    }));
    var ignoreWords =  ["xvid", "720p", "1080p", "dimension", "sample", "nfo", "par2"].selectToObject($CreateAnonymousDelegate(this, function (t){
        return t;
    }), $CreateAnonymousDelegate(this, function (t){
        return true;
    }));
    var list =  [];
    for (var $i2 = 0,$l2 = tokens.length,token = tokens[$i2]; $i2 < $l2; $i2++, token = tokens[$i2]){
        if (ignoreWords[token])
            break;
        if (token.length == 3){
            var season = this.TryParse(token.substr(0, 1));
            var episode = this.TryParse(token.substr(1));
            if (season != null && episode != null && episode < 30){
                var normalized = "S" + season.format("00") + "E" + episode.format("00");
                list.push(normalized);
                break;
            }
        }
        list.push(token);
    }
    var s2 = list.join(" ");
    return s2;
};
dbr.DefaultPage2.prototype.TryParse = function (s){
    var x = parseInt(s);
    if (isNaN(x))
        return null;
    return x;
};

