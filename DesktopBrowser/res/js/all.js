/* Generated by SharpKit 5 v5.4.9 */

/* Generated by SharpKit 5 v5.4.9 */
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}

if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}

if (typeof ($Inherit) == 'undefined') {
	var $Inherit = function (ce, ce2) {

		if (typeof (Object.getOwnPropertyNames) == 'undefined') {

			for (var p in ce2.prototype)
				if (typeof (ce.prototype[p]) == 'undefined' || ce.prototype[p] == Object.prototype[p])
					ce.prototype[p] = ce2.prototype[p];
			for (var p in ce2)
				if (typeof (ce[p]) == 'undefined')
					ce[p] = ce2[p];
			ce.$baseCtor = ce2;

		} else {

			var props = Object.getOwnPropertyNames(ce2.prototype);
			for (var i = 0; i < props.length; i++)
				if (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) == 'undefined')
					Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));

			for (var p in ce2)
				if (typeof (ce[p]) == 'undefined')
					ce[p] = ce2[p];
			ce.$baseCtor = ce2;

		}

	}
};

if (typeof($CreateExtensionDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateExtensionDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                var args = [target];
                for(var i=0;i<arguments.length;i++)
                    args.push(arguments[i]);
                return func.apply(null, args);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            delegate.isExtensionDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}

if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

function $CreateMulticastDelegateFunction()
{
    var del2 = null;
    
    var del=function()
    {
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    del2 = del;   
    
    return del;
};

function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};

function $RemoveDelegate(delOriginal,delToRemove)
{
    if(delToRemove == null || delOriginal == null)
        return delOriginal;
    if(delOriginal.isMulticastDelegate)
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("Multicast to multicast delegate removal is not implemented yet");
        var del=$CreateMulticastDelegateFunction();
        for(var i=0;i < delOriginal.delegates.length;i++)
        {
            var del2=delOriginal.delegates[i];
            if(del2 != delToRemove)
            {
                if(del.delegates == null)
                    del.delegates = [];
                del.delegates.push(del2);
            }
        }
        if(del.delegates == null)
            return null;
        if(del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("single to multicast delegate removal is not supported");
        if(delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};

if (typeof($CreateAnonymousObject)=='undefined') 
{
    var $CreateAnonymousObject = function(json)
    {
        var obj = new System.Object.ctor();
        obj.d = json;
        for(var p in json){
            obj['get_'+p] = new Function('return this.d.'+p+';');
        }
        return obj;
    }
}

if (typeof(Int8Array) == "undefined")
    var Int8Array = Array;
if (typeof(Uint8Array) == "undefined")
    var Uint8Array = Array;
if (typeof(Int16Array) == "undefined")
    var Int16Array = Array;
if (typeof(Uint16Array) == "undefined")
    var Uint16Array = Array;
if (typeof(Int32Array) == "undefined")
    var Int32Array = Array;
if (typeof(Uint32Array) == "undefined")
    var Uint32Array = Array;
if (typeof(Float32Array) == "undefined")
    var Float32Array = Array;
if (typeof(Float64Array) == "undefined")
    var Float64Array = Array;

/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
	var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
		timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
		timezoneClip = /[^-+\dA-Z]/g,
		pad = function (val, len) {
			val = String(val);
			len = len || 2;
			while (val.length < len) val = "0" + val;
			return val;
		};

	// Regexes and supporting functions are cached through closure
	return function (date, mask, utc) {
		var dF = dateFormat;

		// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
		if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
			mask = date;
			date = undefined;
		}

		// Passing date through Date applies Date.parse, if necessary
		date = date ? new Date(date) : new Date;
		if (isNaN(date)) throw SyntaxError("invalid date");

		mask = String(dF.masks[mask] || mask || dF.masks["default"]);

		// Allow setting the utc argument via the mask
		if (mask.slice(0, 4) == "UTC:") {
			mask = mask.slice(4);
			utc = true;
		}

		var	_ = utc ? "getUTC" : "get",
			d = date[_ + "Date"](),
			D = date[_ + "Day"](),
			m = date[_ + "Month"](),
			y = date[_ + "FullYear"](),
			H = date[_ + "Hours"](),
			M = date[_ + "Minutes"](),
			s = date[_ + "Seconds"](),
			L = date[_ + "Milliseconds"](),
			o = utc ? 0 : date.getTimezoneOffset(),
			flags = {
				d:    d,
				dd:   pad(d),
				ddd:  dF.i18n.dayNames[D],
				dddd: dF.i18n.dayNames[D + 7],
				m:    m + 1,
				mm:   pad(m + 1),
				mmm:  dF.i18n.monthNames[m],
				mmmm: dF.i18n.monthNames[m + 12],
				yy:   String(y).slice(2),
				yyyy: y,
				h:    H % 12 || 12,
				hh:   pad(H % 12 || 12),
				H:    H,
				HH:   pad(H),
				M:    M,
				MM:   pad(M),
				s:    s,
				ss:   pad(s),
				l:    pad(L, 3),
				L:    pad(L > 99 ? Math.round(L / 10) : L),
				t:    H < 12 ? "a"  : "p",
				tt:   H < 12 ? "am" : "pm",
				T:    H < 12 ? "A"  : "P",
				TT:   H < 12 ? "AM" : "PM",
				Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
				o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
				S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
			};

		return mask.replace(token, function ($0) {
			return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
		});
	};
}();

// Some common format strings
dateFormat.masks = {
	"default":      "ddd mmm dd yyyy HH:MM:ss",
	shortDate:      "m/d/yy",
	mediumDate:     "mmm d, yyyy",
	longDate:       "mmmm d, yyyy",
	fullDate:       "dddd, mmmm d, yyyy",
	shortTime:      "h:MM TT",
	mediumTime:     "h:MM:ss TT",
	longTime:       "h:MM:ss TT Z",
	isoDate:        "yyyy-mm-dd",
	isoTime:        "HH:MM:ss",
	isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
	isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
	dayNames: [
		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
		"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
	],
	monthNames: [
		"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
		"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
	]
};

// For convenience...
Date.prototype.format = function (mask, utc) {
	return dateFormat(this, mask, utc);
};


var IsIE6 = false;
var IsWebKit = false;
IsIE6 = ((window.navigator.userAgent.indexOf("MSIE 6.") != -1) && (window.navigator.userAgent.indexOf("Opera") == -1));
IsWebKit = (window.navigator.userAgent.indexOf("AppleWebKit") != -1);
function ApplyExactTemplate(el, template){
    if (el.getAttribute("_IsTemplated"))
        return null;
    el.setAttribute("_IsTemplated", true);
    var tmp = template.cloneNode(true);
    tmp.id = "";
    $(el).replaceWith(tmp);
    $("#Element", tmp).replaceWith(el);
    return tmp;
};
function ApplyTemplates(){
    $("#Templates").children().each(function (i, templateEl){
        templateEl.setAttribute("_IsTemplated", true);
        var className = "." + templateEl.id;
        $(className).each(function (index, t){
            ApplyExactTemplate(t, templateEl);
        });
    });
};
function ApplyTemplate(el){
    var className = el.className;
    if (className.length > 0){
        var templateEl = document.getElementById(className);
        if (templateEl != null && templateEl.parentElement.id == "Templates")
            return ApplyExactTemplate(el, templateEl);
    }
    return null;
};
function ParseQueryString(search){
    var obj = new Object();
    var pairs = search.substring(1).split("&");
    for (var $i2 = 0,$l2 = pairs.length,pair = pairs[$i2]; $i2 < $l2; $i2++, pair = pairs[$i2]){
        var tokens = pair.split("=");
        obj[decodeURIComponent(tokens[0])] = decodeURIComponent(tokens[1]);
    }
    return obj;
};
function GetFormData(inputMappings, suffix){
    var obj2 = inputMappings;
    var data = new Object();
    for (var p in obj2){
        var id = obj2[p];
        if (suffix != null)
            id += suffix;
        var input = document.getElementById(id);
        if (input == null)
            continue;
        if (input.type == "checkbox")
            data[p] = input.checked;
        else
            data[p] = input.value;
    }
    return data;
};
function GetRepeatedFormData(inputMappings){
    var list =  [];
    var i = 0;
    while (true){
        i++;
        var data = GetFormData(inputMappings, i.toString());
        if (data == null)
            return list;
        list.push(data);
    }
};
function FixBrowserCompatibilityIssues(){
    if (IsIE6 || IsWebKit){
        $("a").each(function (i, el){
            FixAnchor(el);
        });
    }
};
function FixAnchor(el){
    if (el == null || el.nodeName != "A")
        return;
    if (!IsWebKit)
        return;
    var a = el;
    if (a.href == null || a.href.length == 0)
        a.href = "javascript:void(0);";
};
function SmoothScrollTo(id){
    $("html,body").animate({
        scrollTop: $("#" + id).offset().top
    }, "slow");
};
function SmoothScrollToTop(){
    $("html,body").animate({
        scrollTop: 0
    }, "slow");
};
if (typeof(dbr) == "undefined")
    var dbr = {};
if (typeof(dbr.utils) == "undefined")
    dbr.utils = {};
dbr.utils.JsArrayEnumerator = function (array){
    this.Array = null;
    this.Index = 0;
    this.Array = array;
    this.Index = -1;
};
dbr.utils.JsArrayEnumerator.prototype.MoveNext = function (){
    this.Index++;
    return this.Index < this.Array.length;
};
dbr.utils.JsArrayEnumerator.prototype.get_Current = function (){
    return this.Array[this.Index];
};
dbr.utils.JsArrayEnumerator.prototype.Dispose = function (){
};
dbr.utils.JsArrayEnumerator.prototype.Reset = function (){
    this.Index = -1;
};
Array.prototype.GetEnumerator = function (){
    return new dbr.utils.JsArrayEnumerator(this);
};
$Inherit(Array, Array);
dbr.utils.JsExtensions = function (){
};
dbr.utils.JsExtensions.Trim = function (s){
    return s.replace(new RegExp("^\\s*"), "").replace(new RegExp("\\s*$"), "");
};
dbr.utils.JsExtensions.AsJsArray = function (list){
    throw $CreateException(new System.Exception.ctor(), new Error());
};
dbr.utils.JsExtensions.AsJsArray = function (array){
    throw $CreateException(new System.Exception.ctor(), new Error());
};
dbr.utils.JsExtensions.AsList = function (list){
    throw $CreateException(new System.Exception.ctor(), new Error());
};
dbr.utils.JsExtensions.IndexOf = function (array, item){
    var i = 0;
    for (var $i2 = 0,$l2 = array.length,item2 = array[$i2]; $i2 < $l2; $i2++, item2 = array[$i2]){
        if (item2 == item)
            return i;
        i++;
    }
    return -1;
};
dbr.utils.JsExtensions.Remove = function (array, item){
    var i = 0;
    for (var $i3 = 0,$l3 = array.length,item2 = array[$i3]; $i3 < $l3; $i3++, item2 = array[$i3]){
        if (item2 == item){
            array.splice(i, 1);
            return true;
        }
        i++;
    }
    return false;
};
dbr.utils.JsExtensions.RemoveAt = function (array, index){
    array.splice(index, 1);
};
dbr.utils.JsExtensions.Clear = function (array){
    array.splice(0, array.length);
};
dbr.utils.JsExtensions.Contains = function (array, item){
    for (var $i4 = 0,$l4 = array.length,item2 = array[$i4]; $i4 < $l4; $i4++, item2 = array[$i4]){
        if (item2 == item)
            return true;
    }
    return false;
};
dbr.utils.JsExtensions.Insert = function (array, index, item){
    array.splice(index, 0, item);
};
dbr.utils.jQueryExtensions = function (){
};
dbr.utils.jQueryExtensions.isChecked = function (j, value){
    if (arguments.length == 1)
        return j.attr("checked");
    else {
        j.attr("checked", value);
        return undefined;
    }
};
dbr.utils.jQueryExtensions.val = function (j, visible){
    if (visible)
        j.show();
    else
        j.hide();
};
dbr.utils.Keys = function (){
};
dbr.utils.Keys.Enter = 13;
dbr.utils.Keys.PageUp = 33;
dbr.utils.Keys.PageDown = 34;
dbr.utils.Keys.End = 35;
dbr.utils.Keys.Home = 36;
dbr.utils.Keys.Up = 38;
dbr.utils.Keys.Down = 40;
dbr.utils.ClientExtensions = function (){
};
dbr.utils.ClientExtensions.RegexEscape = function (text){
    return text.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", "g"), "\\$&");
};
dbr.SiteProxy = function (){
    this.DataClient = null;
    this.DataClient = new dbr.utils.DataServiceProxy();
};
dbr.SiteProxy.prototype.Execute = function (path, callback){
    this.Invoke("Execute", [path], callback);
};
dbr.SiteProxy.prototype.Delete = function (path, callback){
    this.Invoke("Delete", [path], callback);
};
dbr.SiteProxy.prototype.Invoke = function (methodName, prms, callback){
    var req = {
        AssemblyName: "DesktopBrowser",
        TypeName: "DesktopBrowser.Server.SiteService",
        MethodName: methodName,
        Parameters: prms
    };
    this.DataClient.InvokeAsync(req, $CreateAnonymousDelegate(this, function (t){
        if (t.Error != null){
            alert(t.Error);
        }
        else {
            if (callback != null)
                callback(t.ReturnValue);
        }
    }), false);
};
dbr.PropHelper = function (){
};
dbr.PropHelper.prototype.Prop = function (prop){
    return dbr.Utils.Prop(prop);
};
dbr.Extensions2 = function (){
};
dbr.Extensions2.ToFloatOrNull = function (s){
    var x = parseFloat(s);
    if (isNaN(x))
        return null;
    return x;
};
dbr.Extensions2.ToIntOrNull = function (s){
    var x = parseInt(s);
    if (isNaN(x))
        return null;
    return x;
};
dbr.Extensions2.Abs = function (x){
    return Math.abs(x);
};
dbr.Extensions2.ForEachWithPrev$1 = function (list, action){
    var prev = Default(T);
    for (var $i5 = 0,$l5 = list.length,item = list[$i5]; $i5 < $l5; $i5++, item = list[$i5]){
        action(item, prev);
        prev = item;
    }
};
dbr.Extensions2.ItemProp$1 = function (list, prop){
    return dbr.Utils.Prop(prop);
};
dbr.Extensions2.ToDate = function (yyyy_mm_dd){
    if (Q.isNullOrEmpty(yyyy_mm_dd))
        return null;
    return Date.tryParseExact(yyyy_mm_dd, "yyyy-MM-dd");
};
dbr.Extensions2.ToDefaultDateString = function (date){
    if (date == null)
        return null;
    return date.format("yyyy-MM-dd");
};
dbr.Extensions2.ToDateValue = function (yyyy_mm_dd){
    return dbr.Extensions2.ToDate(yyyy_mm_dd).valueOf();
};
dbr.Extensions2.Trigger = function (action){
    if (action != null)
        action();
};
dbr.Extensions2.GetPropertyName$1 = function (obj, prop){
    return dbr.Utils.Prop(prop);
};
dbr.Extensions2.InvokeAsyncParallel = function (list, finalCallback){
    var count = 0;
    var total = list.length;
    var cb = function (){
        count++;
        if (count == total){
            dbr.Extensions2.Trigger(finalCallback);
        }
    };
    list.forEach(function (t){
        t(cb);
    });
};
dbr.Extensions2.GetCreateChildDivWithClass = function (el, className){
    var ch = el.children("." + className);
    if (ch.length == 0)
        ch = $("<div/>").addClass(className).appendTo(el);
    return ch;
};
dbr.Extensions2.DataItem$1 = function (j){
    return j.data("DataItem");
};
dbr.Utils = function (){
};
dbr.Utils.data = null;
dbr.Utils.CalcChangePct = function (from, to){
    var pct = ((to / from) - 1);
    return pct;
};
dbr.Utils.ObjToClass = function (obj, defaultTypeForNull){
    var sb =  [];
    var mappings = (function (){
        var $v1 = new Object();
        $v1 ["object"] = "JsObject";
        $v1 ["number"] = "JsNumber";
        $v1 ["boolean"] = "JsBoolean";
        $v1 ["string"] = "JsString";
        return $v1;
    })();
    sb.push("public class Obj");
    sb.push("{");
    for (var p in obj){
        var value = obj[p];
        var type = typeof(value);
        var type2 = (mappings[type] != null ? mappings[type] : type);
        if (value == null)
            type2 = (defaultTypeForNull != null ? defaultTypeForNull : "object");
        sb.push("public " + type2 + " " + p + " { get; set; }");
    }
    sb.push("}");
    return sb.join("\n");
};
dbr.Utils.PropHelper = function (){
    var x = new dbr.PropHelper();
    return x.Prop;
};
dbr.Utils.Prop = function (prop){
    var code;
    if (prop["isDelegate"])
        code = prop["func"].toString();
    else
        code = prop.toString();
    return code.substringBetween(".", ";");
};
dbr.Utils.listToMatrix = function (list, xProp, yProp, valueProp, aggregateFunc, yieldCallback){
    if (aggregateFunc == null)
        aggregateFunc = function (values){
            return values.sum();
        };
    var xPropSelector = Q.createSelectorFunction(xProp);
    var yPropSelector = Q.createSelectorFunction(yProp);
    var valuePropSelector = Q.createSelectorFunction(valueProp);
    var xs = list.select(xPropSelector).distinct();
    var ys = list.select(yPropSelector).distinct();
    xs.forEach(function (x, xIndex){
        var row =  [x];
        ys.forEach(function (y, yIndex){
            var values = list.where(function (t){
                return xPropSelector(t) == x && yPropSelector(t) == y;
            }).select(valuePropSelector);
            var aggregated = aggregateFunc(values);
            yieldCallback(x, y, aggregated, xIndex, yIndex);
        });
    });
};
dbr.Utils.listToMatrixRows = function (list, xProp, yProp, valueProp, aggregateFunc){
    var header =  [];
    var rows =  [];
    dbr.Utils.listToMatrix(list, xProp, yProp, valueProp, aggregateFunc, function (x, y, value, xIndex, yIndex){
        if (xIndex == 0){
            if (yIndex == 0)
                header.push(xProp);
            header.push(y);
        }
        if (yIndex == 0)
            rows[xIndex] =  [x, value];
        else
            rows[xIndex].push(value);
    });
    rows.insert(0, header);
    return rows;
};
dbr.Utils.listToMatrixObject = function (list, xProp, yProp, valueProp, aggregateFunc){
    var byX = new Object();
    dbr.Utils.listToMatrix(list, xProp, yProp, valueProp, aggregateFunc, function (x, y, value, xIndex, yIndex){
        var xx = x;
        var yy = y;
        if (byX[xx] == null)
            byX[xx] = new Object();
        byX[xx][yy] = value;
    });
    return byX;
};
dbr.Utils.cleanUpRows = function (rows){
    rows.forEach(function (row){
        row.forEach(function (value, i){
            if (value === undefined)
                row[i] = null;
        });
    });
    return rows;
};
dbr.Utils.clearTextNodes = function (el){
    if (el == null)
        el = document.body;
    $(el).find("*+*").toArray().forEach(function (el2){
        var prev = el2.previousSibling;
        while (prev != null && prev.nodeType == 3){
            var tmp = prev;
            prev = prev.previousSibling;
            tmp.remove();
        }
    });
};
dbr.Utils.createTabControl = function (div){
    var tabs = div.children("div");
    var ul = div.getAppend("ul.nav.nav-tabs");
    var lis = ul.getAppendRemove("li", tabs.length).toArray();
    var btns = tabs.toArray().select(function (tab, i){
        var li = $(lis[i]);
        var btn = li.getAppend("a").text(tab.title).data("target", "#" + tab.id);
        tab.title = "";
        return btn[0];
    });
    var btns2 = $(btns);
    btns2.mousedown(function (e){
        e.preventDefault();
        var target = $(e.target);
        target.tab("show");
        var tab = $(target.data("target"));
        tab.trigger("tabchanged");
    });
    div.getAppend(".tab-content").append(tabs);
    tabs.addClass("tab-pane");
    tabs.first().addClass("active");
    btns2.first().tab("show");
};
dbr.Utils._Unwrap = function (obj){
    var keys = Object.keys(obj);
    if (keys.length == 2 && keys.contains("_value") && keys.contains("_name")){
        return obj["_value"];
    }
    return obj;
};
dbr.Utils._xmlToJson = function (el){
    if (el.nodeType == 3)
        return el.data;
    if (el.nodeType != 1)
        return undefined;
    var obj = new Object();
    obj["_name"] = el.nodeName;
    for (var i = 0; i < el.attributes.length; i++){
        var att = el.attributes[i];
        obj[att.name] = att.value;
    }
    for (var i = 0; i < el.childNodes.length; i++){
        var node2 = el.childNodes[i];
        if (node2.nodeType == 1){
            var el2 = node2;
            var prop = el2.nodeName;
            var objValue = obj[prop];
            if (objValue != null){
                var list;
                if (objValue instanceof Array){
                    list = objValue;
                }
                else {
                    list =  [objValue];
                    obj[el2.nodeName] = list;
                }
                list.push(dbr.Utils._Unwrap(dbr.Utils._xmlToJson(el2)));
                continue;
            }
            obj[el2.nodeName] = dbr.Utils._Unwrap(dbr.Utils._xmlToJson(el2));
        }
        else {
            var value = dbr.Utils._xmlToJson(node2);
            obj._value = value;
        }
    }
    return obj;
};
dbr.Utils.xmlToJson = function (xml){
    if (typeof(xml) == "string")
        xml = $.parseXML(xml);
    var el = xml.documentElement;
    var obj = dbr.Utils._xmlToJson(el);
    return obj;
};
dbr.Utils.parseDutchFloat = function (s){
    s = s.replaceAll(".", "d").replaceAll(",", ".").replaceAll("d", ",");
    return parseFloat(s);
};
dbr.Utils.proxy = function (url, q, data, cb){
    var qurl = url;
    if (q != null)
        qurl = url += "?" + QueryString.stringify(q);
    var q2 = {
        url: qurl
    };
    var x = {
        url: "proxy.ashx?" + $.param(q2),
        data: data,
        success: function (t, b, c){
            if (cb != null)
                cb(t, null);
        },
        error: function (jqXHR, textStatus, errorThrown){
            if (cb != null)
                cb(Default(T), errorThrown);
        }
    };
    x.method = data != null ? "POST" : "GET";
    $.ajax(x);
};
dbr.utils.DataServiceProxy = function (){
    this.DataServiceUrl = null;
    this.DataServiceUrl = "DataService.ashx";
};
dbr.utils.DataServiceProxy.CreateRequest = function (){
    if (window.XMLHttpRequest)
  return new XMLHttpRequest();

else if (window.ActiveXObject)
     return new ActiveXObject('MSXML2.XMLHTTP.3.0');
else
    throw new Error('Your browser does not support ajax requests');
};
dbr.utils.DataServiceProxy.WebGetAsync = function (url, callback){
    var req = dbr.utils.DataServiceProxy.CreateRequest();
    req.open("GET", url, true);
    req.onreadystatechange = function (){
        if (req.readyState == 4){
            callback(req);
        }
    };
    req.send(null);
};
dbr.utils.DataServiceProxy.WebPostFormAsync = function (url, form, callback){
    var req = dbr.utils.DataServiceProxy.CreateRequest();
    req.open("POST", url, true);
    req.setRequestHeader("content-type", "application/x-www-form-urlencoded");
    req.onreadystatechange = function (){
        if (req.readyState == 4){
            callback(req);
        }
    };
    var sb =  [];
    dbr.utils.DataServiceProxy.SerializeForm(form, sb);
    req.send(sb.join(""));
};
dbr.utils.DataServiceProxy.SerializeForm = function (form, sb){
    var first = true;
    for (var p in form){
        if (first)
            first = false;
        else
            sb.push("&");
        sb.push(p);
        sb.push("=");
        sb.push(encodeURIComponent(form[p]));
    }
};
dbr.utils.DataServiceProxy.prototype.InvokeAsync = function (req, callback, useGetMethod){
    var callback2 = $CreateAnonymousDelegate(this, function (t){
        var res = {};
        if (t.status == 200){
            var code = t.responseText;
            res = JSON.parse(code);
        }
        else {
            res.Error = "Http error code " + t.status + ", " + t.statusText;
        }
        callback(res);
    });
    var url = this.DataServiceUrl;
    var sb =  [];
    if (useGetMethod){
        sb.push(url, "?z=z");
        dbr.utils.DataServiceProxy.SerializeToQueryString(req, sb);
        url = sb.join("");
        dbr.utils.DataServiceProxy.WebGetAsync(url, callback2);
    }
    else {
        var body = JSON.stringify(req);
        dbr.utils.DataServiceProxy.WebPostFormAsync(url, new Object({
            req: body
        }), callback2);
    }
};
dbr.utils.DataServiceProxy.SerializeToQueryString = function (req, sb){
    if (req.AssemblyName != null)
        sb.push("&a=" + req.AssemblyName);
    if (req.TypeName != null)
        sb.push("&t=" + req.TypeName);
    if (req.MethodName != null)
        sb.push("&m=" + req.MethodName);
    if (req.InstanceSessionKey != null)
        sb.push("&isk=" + req.InstanceSessionKey);
    if (req.Parameters != null){
        var prms = req.Parameters;
        for (var i = 0; i < prms.length; i++){
            sb.push("&p");
            sb.push((i + 1).toString());
            sb.push("=");
            sb.push(encodeURIComponent(prms[i].toString()));
        }
    }
};

if (typeof(dbr) == "undefined")
    var dbr = {};
dbr.DefaultPage = function (){
    this.win = null;
    this.Selector = null;
    this.SiteProxy = null;
    this.PageSize = 10;
    this.Data = null;
    this.SiteProxy = new dbr.SiteProxy();
    this.win = window;
    this.Data = {};
    $($CreateDelegate(this, this.DefaultClient_Load));
};
dbr.DefaultPage.prototype.DefaultClient_Load = function (){
    if (this.Data.MoreAvailable === false){
        $(".Pager .Next").addClass("disabled").attr("disabled", "disabled");
    }
    this.Selector = new dbr.utils.Selector();
    this.Selector.Selected = $CreateAnonymousDelegate(this, function (t){
        t.className = "Selected";
        this.SaveSelection($(t).find(".NameCell A").text());
    });
    this.Selector.UnSelected = $CreateAnonymousDelegate(this, function (t){
        t.className = "";
    });
    this.UpdateClock();
    this.RestoreSelection();
    $(this.win).keydown($CreateAnonymousDelegate(this, function (e){
        if (e.target != null && e.target.nodeName == "INPUT")
            return;
        if (e.which == dbr.utils.Keys.Up){
            e.preventDefault();
            this.Up();
        }
        else if (e.which == dbr.utils.Keys.Down){
            e.preventDefault();
            this.Down();
        }
        else if (e.which == dbr.utils.Keys.PageDown){
            e.preventDefault();
            this.PageDown();
        }
        else if (e.which == dbr.utils.Keys.PageUp){
            e.preventDefault();
            this.PageUp();
        }
        else if (e.which == dbr.utils.Keys.Enter){
            e.preventDefault();
            this.Enter();
        }
        else {
            $("#tbSearch").get(0).focus();
        }
    }));
};
dbr.DefaultPage.prototype.WriteLine = function (obj){
    this.win.document.body.appendChild(this.win.document.createTextNode(obj));
    this.win.document.body.appendChild(this.win.document.createElement("br"));
};
dbr.DefaultPage.prototype.CanMoveSelection = function (by){
    return this.MoveSelection(by, false);
};
dbr.DefaultPage.prototype.MoveSelection = function (by, preview){
    var by2 = by;
    var row = $(this.Selector.SelectedItem);
    if (row.length == 0)
        return false;
    while (by2 > 0){
        if (row.next().length == 0)
            break;
        row = row.next();
        by2--;
    }
    while (by2 < 0){
        if (row.prev().length == 0)
            break;
        row = row.prev();
        by2++;
    }
    if (row.length == 0 || by == by2)
        return false;
    if (!preview){
        var row2 = row.get(0);
        this.Select(row2);
    }
    return true;
};
dbr.DefaultPage.prototype.Select = function (row){
    this.Selector.Select(row);
    var pos = $(row).offset();
    if (pos.top < this.win.pageYOffset){
        row.scrollIntoView(true);
    }
    else if (pos.top > this.win.pageYOffset + this.win.innerHeight){
        row.scrollIntoView(false);
    }
};
dbr.DefaultPage.prototype.PageDown = function (){
    return this.MoveSelection(this.PageSize * 1, false);
};
dbr.DefaultPage.prototype.PageUp = function (){
    return this.MoveSelection(this.PageSize * -1, false);
};
dbr.DefaultPage.prototype.Enter = function (){
    var anchor = $(this.Selector.SelectedItem).find("a").get(0);
    if (anchor.nodeName == "A"){
        this.SimulateClick(anchor);
        return true;
    }
    return false;
};
dbr.DefaultPage.prototype.SelectFirstItem = function (){
    var first = $("grdFiles TBODY TR").first().get(0);
    if (first != null){
        this.Select(first);
        return true;
    }
    return false;
};
dbr.DefaultPage.prototype.Down = function (){
    if (!this.MoveSelection(1, false))
        return this.SelectFirstItem();
    return false;
};
dbr.DefaultPage.prototype.Up = function (){
    if (!this.MoveSelection(-1, false))
        return this.SelectFirstItem();
    return false;
};
dbr.DefaultPage.prototype.RestoreSelection = function (){
    var folder = $("#tbFilename").val();
    var filename = this.GetStorageItem(folder);
    if (filename != null && filename.length > 0){
        $("#grdFiles .NameCell A").each($CreateAnonymousDelegate(this, function (i, el){
            var x = $(el);
            if (x.text() == filename){
                this.Selector.Select(x.parents("tr").first().get(0));
                return false;
            }
        }));
    }
};
dbr.DefaultPage.prototype.GetStorageItem = function (key){
    return this.win.localStorage.getItem(key);
};
dbr.DefaultPage.prototype.SetStorageItem = function (key, value){
    this.win.localStorage.setItem(key, value);
};
dbr.DefaultPage.prototype.SaveSelection = function (filename){
    var folder = $("#tbFilename").val();
    var nextYear = new Date();
    nextYear.setFullYear(nextYear.getFullYear() + 4);
    this.SetStorageItem(folder, filename);
};
dbr.DefaultPage.prototype.UpdateClock = function (){
    $("#divTime").text(new Date().format("h:MM tt"));
    $("#divDate").text(new Date().format("ddd, mmm d"));
    this.win.setTimeout($CreateDelegate(this, this.UpdateClock), 5000);
};
dbr.DefaultPage.prototype.Execute = function (path){
    new dbr.SiteProxy().Execute(path, null);
};
dbr.DefaultPage.prototype.OpenFile = function (path){
    new dbr.SiteProxy().Execute(path, null);
};
dbr.DefaultPage.prototype.GetSelectedPath = function (){
    if (this.Selector.SelectedItem == null)
        return null;
    var filePath = $(this.Selector.SelectedItem).find(".ihFilePath").val();
    return filePath;
};
dbr.DefaultPage.prototype.btnDelete_click = function (){
    var path = this.GetSelectedPath();
    if (path == null)
        return;
    if (!this.win.confirm("are you sure you want to permanantly delete the path: " + path))
        return;
    this.SiteProxy.Delete(path, $CreateAnonymousDelegate(this, function (t){
        this.win.location.reload();
    }));
};
dbr.DefaultPage.prototype.Filter = function (el, exp){
    var x = $(el);
    x.parents("tr").first().toggle(x.text().search(exp) >= 0);
};
dbr.DefaultPage.prototype.tbFolder_keydown = function (e){
    if (e.keyCode == 13){
        this.Go();
    }
};
dbr.DefaultPage.prototype.Go = function (){
    var newPath = $("#tbFolder").val();
    this.win.location.href = "?p=" + encodeURIComponent(newPath);
};
dbr.DefaultPage.prototype.btnGo_click = function (e){
    this.Go();
};
dbr.DefaultPage.prototype.tbSearch_keyup = function (e){
    var search = $("#tbSearch").val();
    var exp = new RegExp(dbr.utils.ClientExtensions.RegexEscape(search), "i");
    $("#grdFiles .NameCell A").each($CreateAnonymousDelegate(this, function (i, el){
        this.Filter(el, exp);
    }));
};
dbr.DefaultPage.prototype.SimulateClick = function (anchor){
    var a = $(anchor);
    a.trigger("click", null);
    var href = a.attr("href");
    if (href != null && href.length > 0){
        var target = a.attr("target");
        if (target == "_blank")
            this.win.open(href, "");
        else
            this.win.location.href = href;
    }
};
if (typeof(dbr.utils) == "undefined")
    dbr.utils = {};
dbr.utils.Selector = function (){
    this.Selected = null;
    this.UnSelected = null;
    this.SelectedItem = null;
};
dbr.utils.Selector.prototype.Select = function (el){
    if (this.SelectedItem == el)
        return;
    var unselected = this.SelectedItem;
    this.SelectedItem = el;
    if (unselected != null && this.UnSelected != null)
        this.UnSelected(unselected);
    if (this.SelectedItem != null && this.Selected != null)
        this.Selected(this.SelectedItem);
};

